{"version":3,"file":"static/js/680.8a11a1ba.chunk.js","mappings":"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","sources":["adapters/UserAdapter.js","services/serviceUser.js","pages/Landing/components/HeroForm/HeroFormUtil.js","models/Profile.js","adapters/ProfileAdapter.js","services/serviceProfile.js","services/serviceUserAuth.js"],"sourcesContent":["// eslint-disable-next-line no-unused-vars\nimport { shapeUser, User } from \"../models/User\";\n\n/**\n *\n * @param {Object} objRawUser\n * @returns {User | null}\n */\nconst userFromDataBase = (objRawUser) => {\n  try {\n    const objUser = shapeUser(\n      objRawUser.strUserId,\n      objRawUser.strEmail,\n      objRawUser.strFullName,\n      objRawUser.strAuthMethod,\n      objRawUser.strProfilePicURL,\n      objRawUser.dtCreatedOn.toDate(),\n      objRawUser.booActive\n    );\n\n    if (objUser) {\n      return objUser;\n    }\n  } catch (error) {\n    console.error(\"UserAdapter.fromDataBase:\", error);\n  }\n\n  return null;\n};\n\n/**\n * Converts the object to be serializable\n * @param {User} objUser\n * @returns {Object}\n */\nconst userToReduxStore = (objUser) => {\n  return { ...objUser, dtCreatedOn: objUser.dtCreatedOn.getTime() };\n};\n\n/**\n * Converts the input parameter into a User object\n * @param {Object} objRawUser\n * @returns {Object}\n */\nconst userFromReduxStore = (objRawUser) => {\n  return { ...objRawUser, dtCreatedOn: new Date(objRawUser.dtCreatedOn) };\n};\n\nexport { userFromDataBase, userToReduxStore, userFromReduxStore };\n","import { shapeUser } from \"../models/User\";\nimport { CollectionNames } from \"../utilities/Enums\";\nimport { createWithId, selectById } from \"./firestoreUtil\";\n// eslint-disable-next-line no-unused-vars\nimport { User } from \"../models/User\";\nimport { userFromDataBase } from \"../adapters/UserAdapter\";\n\n/**\n * @module ServiceUser\n */\n\n/**\n *\n * @param {string} strUserId\n * @param {string} strEmail\n * @param {string} strFullName\n * @param {string} strAuthMethod\n * @param {string} strProfilePicURL\n * @returns {Promise<User | null>}\n */\nconst createUser = async (\n  strUserId,\n  strEmail,\n  strFullName,\n  strAuthMethod,\n  strProfilePicURL\n) => {\n  const objUser = shapeUser(\n    strUserId,\n    strEmail,\n    strFullName,\n    strAuthMethod,\n    strProfilePicURL,\n    new Date(),\n    true\n  );\n  if (await createWithId(objUser, strUserId, CollectionNames.USERS)) {\n    return objUser;\n  } else {\n    return null;\n  }\n};\n\n/**\n *\n * @param {string} strId\n * @returns {Promise<User | null>}\n */\nconst getUser = async (strId) => {\n  const objRawUser = await selectById(strId, CollectionNames.USERS);\n  return userFromDataBase(objRawUser);\n};\n\nexport { createUser, getUser };\n","//import { Dispatch, AnyAction } from \"@reduxjs/toolkit\";\n//import { UserCredential } from \"firebase/auth\";\nimport { setLoggedUser } from \"../../../../redux/states/logedUserSlice\";\nimport { createUser, getUser } from \"../../../../services/serviceUser\";\nimport {\n  AuthenticationMethods,\n  Constants,\n  NavigationPaths,\n} from \"../../../../utilities\";\n// eslint-disable-next-line no-unused-vars\nimport { NavigateFunction } from \"react-router-dom\";\nimport { getBlobFile } from \"../../../../services/serviceIO\";\n\nimport {\n  anonymousSignInUser,\n  googleSignInUser,\n  isNewUser,\n} from \"../../../../services/serviceUserAuth\";\nimport { saveFile } from \"../../../../services/firestorageUtil\";\nimport AnonymousUserData from \"../../../../utilities/AnonymousUserData\";\nimport {\n  createProfile,\n  getMainProfile,\n} from \"../../../../services/serviceProfile\";\nimport { DatabaseValues } from \"./../../../../utilities/DatabaseValues\";\n\n// const promiseServAuth = (async () => {\n//   const { anonymousSignInUser, googleSignInUser, isNewUser } = await import(\n//     \"../../../../services/serviceUserAuth\"\n//   );\n//   return {\n//     anonymousSignInUser,\n//     googleSignInUser,\n//     isNewUser,\n//   };\n// })();\n\n// const promiseSaveFile = (async () => {\n//   const { saveFile } = await import(\"../../../../services/firestorageUtil\");\n//   return saveFile;\n// })();\n\n/**\n * Analyzes the profile picture url provided, if it contains data then it will be stored in the firestorage, otherwise, it will store a defatul picture. Returns the public URL of the recently saved picture.\n * @param {string | null} strPhotoURL\n * @param {string} strUserId\n * @returns {Promise<string | null>}\n */\n// eslint-disable-next-line no-unused-vars\nconst processProfilePhotoURL = async (strPhotoURL, strUserId) => {\n  if (strPhotoURL && strPhotoURL.length > 0) {\n    const objBlob = await getBlobFile(strPhotoURL, {\n      referrerPolicy: \"no-referrer\",\n    });\n\n    if (objBlob) {\n      const strPicDestinationPath =\n        strUserId + \"/\" + Constants.ProfilePictureName;\n      //const saveFile = await promiseSaveFile;\n      const objURLs = await saveFile(strPicDestinationPath, objBlob);\n      return objURLs?.strFileURL ?? null;\n    }\n  }\n\n  return null;\n};\n\n/**\n *\n * @returns {Promise<string>}\n */\nconst getDefaultProfilePicUrl = async () => {\n  const { DatabaseValues } = await import(\n    \"./../../../../utilities/DatabaseValues\"\n  );\n  const objDefaultPhotoURL = await DatabaseValues;\n  return objDefaultPhotoURL ? objDefaultPhotoURL.strDefaultProfilePicURL : \"\";\n};\n\n/**\n * @param {Object} dispatch\n * @param {NavigateFunction} objNavigate\n * @param {string} strUserId\n * @return {Promise<void>}\n */\nconst handleExistingUser = async (strUserId, dispatch, objNavigate) => {\n  const objExistingUser = await getUser(strUserId);\n  if (objExistingUser) {\n    const objMainProfile = await getMainProfile(objExistingUser.strUserId);\n    if (objMainProfile) {\n      objExistingUser.objProfile = objMainProfile;\n      dispatch(setLoggedUser(objExistingUser));\n      objNavigate(NavigationPaths.FEED, { state: { loggedIn: true } });\n    }\n  }\n};\n\n/**\n *\n * @param {string} strUserOwnerId\n * @param {string} strAbout\n * @param {string} strProfilePicURL\n * @param {string} strBgPicPath\n * @param {string} strFullName\n * @param {string} strHeadLine\n * @param {string} strCountry\n * @param {string} strPostalCode\n * @param {string} strLanguageId\n * @returns\n */\nconst createDefaultProfile = async (\n  strUserOwnerId,\n  strAbout,\n  strProfilePicURL,\n  strBgPicPath,\n  strFullName,\n  strHeadLine,\n  strCountry,\n  strPostalCode,\n  strLanguageId\n) => {\n  const arrNames = strFullName.split(\" \");\n  const strFirstName = arrNames[0].length > 0 ? arrNames[0] : \"Dwight\";\n  const strLastName =\n    arrNames.length > 1 ? arrNames.slice(1).join(\" \").trim() : \"Schrute\";\n\n  return await createProfile(\n    strUserOwnerId,\n    true,\n    [],\n    strAbout,\n    strProfilePicURL,\n    strBgPicPath,\n    strFirstName,\n    strLastName,\n    strHeadLine,\n    strCountry,\n    strPostalCode,\n    strLanguageId\n  );\n};\n\n/**\n *\n * @param {Object} objUserCredential\n * @param {string} strAuthMethod\n * @param {Object} dispatch\n * @param {NavigateFunction} objNavigate\n * @returns {Promise<void>}\n */\nconst handleAuthUserInfo = async (\n  objUserCredential,\n  strAuthMethod,\n  dispatch,\n  objNavigate\n) => {\n  const objUser = objUserCredential.user;\n\n  if (isNewUser(objUserCredential)) {\n    let strPhotoURL = \"\";\n    if (objUser.photoURL && objUser.photoURL.length > 0) {\n      strPhotoURL = objUser.photoURL;\n    } else {\n      strPhotoURL = await getDefaultProfilePicUrl();\n    }\n\n    const objCreatedUser = await createUser(\n      objUser.uid,\n      objUser.email ?? \"\",\n      objUser.displayName ?? \"Dwight Schrute\",\n      strAuthMethod,\n      strPhotoURL\n    );\n\n    if (objCreatedUser) {\n      const strBgPicPath =\n        (await DatabaseValues)?.strDefaultBackgroundPicURL ?? \"\";\n\n      const objProfile = await createDefaultProfile(\n        objCreatedUser.strUserId,\n        \"\",\n        objCreatedUser.strProfilePicURL,\n        strBgPicPath,\n        objCreatedUser.strFullName,\n        Constants.ProfileHeadLineEmptyName,\n        Constants.ProfileCountryEmptyName,\n        Constants.ProfilePostalCodeEmptyName,\n        Constants.DefaultValueLanguageId\n      );\n\n      if (objProfile) {\n        objCreatedUser.objProfile = objProfile;\n        dispatch(setLoggedUser(objCreatedUser));\n        objNavigate(NavigationPaths.FEED, { state: { loggedIn: true } });\n      }\n    }\n  } else {\n    handleExistingUser(objUser.uid, dispatch, objNavigate);\n  }\n};\n\n/**\n * @param {Object} dispatch\n * @param {NavigateFunction} objNavigate\n * @returns {Promise<void>}\n */\nconst authenticateAnonymously = async (dispatch, objNavigate) => {\n  const objUserCredential = await anonymousSignInUser();\n\n  if (objUserCredential) {\n    //We extract the anonymous user created in the DB.\n    handleExistingUser(AnonymousUserData.strUserId, dispatch, objNavigate);\n  }\n};\n\n/**\n * @param {Object} dispatch\n * @param {NavigateFunction} objNavigate\n * @returns {Promise<void>}\n */\nconst handleAsyncJoinGoogle = async (dispatch, objNavigate) => {\n  //const { googleSignInUser } = await promiseServAuth;\n  const objUserCredential = await googleSignInUser();\n  if (objUserCredential) {\n    handleAuthUserInfo(\n      objUserCredential,\n      AuthenticationMethods.FIREBASE_GOOGLE,\n      dispatch,\n      objNavigate\n    );\n  }\n};\n\nexport { authenticateAnonymously, handleAsyncJoinGoogle };\n","/**\n * @module Factory_Profile\n */\n\n/**\n * @typedef {Object} ProfileIntro\n * @property {string} strFirstName\n * @property {string} strLastName\n * @property {string} strHeadline\n * @property {string} strCountryLoc\n * @property {string} strPostalCodeLoc\n */\n\n/**\n * @typedef {Object} Profile\n * @property {string} strProfileId - A composite Id with the shape  of \"strUserId-strLanguageId\"\n * @property {boolean} booPrimary - Indicates if this is the primary profile or not\n * @property {(\"education\"|\"skill\"|\"experience\")[]} arrSections - Contains the list of section this Profile has configured with at least one register or document in the database.\n * @property {string} strAbout\n * @property {ProfileIntro} objIntro\n * @property {string} strProfilePicURL\n * @property {string} strBgPicPath\n * @property {Date} dtCreatedOn\n * @property {boolean} booActive\n * @property {string} strUserId\n */\n\n/**\n * @param {string} strProfileId - A composite Id with the shape  of \"strUserId-strLanguageId\"\n * @param {boolean} booPrimary - Indicates if this is the primary profile or not\n * @param {(\"education\"|\"skill\"|\"experience\")[]} arrSections - Contains the list of section this Profile has configured with at least one register or document in the database.\n * @param {string} strAbout\n * @param {ProfileIntro} objIntro\n * @param {string} strProfilePicURL\n * @param {string} strBgPicPath\n * @param {Date} dtCreatedOn\n * @param {boolean} booActive\n * @param {string} strUserOwnerId\n * @returns {Profile}\n */\nfunction shapeProfile(\n  strProfileId,\n  booPrimary,\n  arrSections,\n  strAbout,\n  objIntro,\n  strProfilePicURL,\n  strBgPicPath,\n  dtCreatedOn,\n  booActive,\n  strUserOwnerId\n) {\n  return {\n    strProfileId,\n    booPrimary,\n    arrSections,\n    strAbout,\n    objIntro,\n    strProfilePicURL,\n    strBgPicPath,\n    dtCreatedOn,\n    booActive,\n    strUserId: strUserOwnerId,\n  };\n}\n\n/**\n * @param {string} strFirstName\n * @param {string} strLastName\n * @param {string} strHeadline\n * @param {string} strCountryLoc\n * @param {string} strPostalCodeLoc\n * @returns {ProfileIntro}\n */\nfunction shapeProfileIntro(\n  strFirstName,\n  strLastName,\n  strHeadline,\n  strCountryLoc,\n  strPostalCodeLoc\n) {\n  return {\n    strFirstName,\n    strLastName,\n    strHeadline,\n    strCountryLoc,\n    strPostalCodeLoc,\n  };\n}\n\n/**\n *\n * @param {string} strUserOwnerId\n * @param {string} strLanguageId\n * @returns {string}\n */\nconst composeNewProfileId = (strUserOwnerId, strLanguageId) => {\n  return strUserOwnerId + \"-\" + strLanguageId;\n};\n\nexport { shapeProfile, shapeProfileIntro, composeNewProfileId };\n","import { shapeProfile, shapeProfileIntro } from \"../models\";\n\nconst profileFromDataBase = (objRawProfile) => {\n  try {\n    const objProfileIntro = shapeProfileIntro(\n      objRawProfile.objIntro.strFirstName,\n      objRawProfile.objIntro.strLastName,\n      objRawProfile.objIntro.strHeadline,\n      objRawProfile.objIntro.strCountryLoc,\n      objRawProfile.objIntro.strPostalCodeLoc\n    );\n\n    const objProfile = shapeProfile(\n      objRawProfile.strProfileId,\n      objRawProfile.booPrimary,\n      objRawProfile.arrSections,\n      objRawProfile.strAbout,\n      objProfileIntro,\n      objRawProfile.strProfilePicURL,\n      objRawProfile.strBgPicPath,\n      objRawProfile.dtCreatedOn.toDate(),\n      objRawProfile.booActive,\n      objRawProfile.strUserId\n    );\n\n    if (objProfile) {\n      return objProfile;\n    }\n  } catch (error) {\n    console.error(\"ProfileAdapter.profileFromDataBase:\", error);\n  }\n\n  return null;\n};\n\nexport { profileFromDataBase };\n","import {\n  composeNewProfileId,\n  shapeProfile,\n  shapeProfileIntro,\n} from \"../models\";\nimport { CollectionNames } from \"../utilities/Enums\";\n// eslint-disable-next-line no-unused-vars\nimport { Profile } from \"../models\";\nimport {\n  createWithId,\n  selectAll,\n  selectCollectionGroup,\n  where,\n} from \"./firestoreUtil\";\nimport { profileFromDataBase } from \"../adapters\";\n\n/**\n * @module ServiceProfile\n */\n\n/**\n * @param {string} strUserOwnerId\n * @param {boolean} booPrimary - Indicates if this is the primary profile or not\n * @param {(\"education\"|\"skill\"|\"experience\")[]} arrSections - Contains the list of section this Profile has configured with at least one register or document in the database.\n * @param {string} strAbout\n * @param {string} strProfilePicURL\n * @param {string} strBgPicPath\n * @param {string} strFirstName\n * @param {string} strLastName\n * @param {string} strHeadline\n * @param {string} strCountryLoc\n * @param {string} strPostalCodeLoc\n * @param {string} strLanguageId\n * @returns {Promise<Profile | null>}\n */\nconst createProfile = async (\n  strUserOwnerId,\n  booPrimary,\n  arrSections,\n  strAbout,\n  strProfilePicURL,\n  strBgPicPath,\n  strFirstName,\n  strLastName,\n  strHeadline,\n  strCountryLoc,\n  strPostalCodeLoc,\n  strLanguageId\n) => {\n  const objProfileIntro = shapeProfileIntro(\n    strFirstName,\n    strLastName,\n    strHeadline,\n    strCountryLoc,\n    strPostalCodeLoc\n  );\n\n  const objProfile = shapeProfile(\n    composeNewProfileId(strUserOwnerId, strLanguageId),\n    booPrimary,\n    arrSections,\n    strAbout,\n    objProfileIntro,\n    strProfilePicURL,\n    strBgPicPath,\n    new Date(),\n    true,\n    strUserOwnerId\n  );\n\n  if (\n    await createWithId(\n      objProfile,\n      objProfile.strProfileId,\n      CollectionNames.USERS,\n      strUserOwnerId,\n      CollectionNames.PROFILES\n    )\n  ) {\n    return objProfile;\n  } else {\n    return null;\n  }\n};\n\n/**\n *\n * @param {string} strOserOwnerId\n * @returns {Promise<Profile | null>}\n */\nconst getMainProfile = async (strOserOwnerId) => {\n  const arrQueryConstraint = [\n    where(\"booActive\", \"==\", true),\n    where(\"booPrimary\", \"==\", true),\n  ];\n  const objRawProfile = await selectAll(\n    arrQueryConstraint,\n    CollectionNames.USERS,\n    strOserOwnerId,\n    CollectionNames.PROFILES\n  );\n\n  if (objRawProfile && objRawProfile.length === 1) {\n    return profileFromDataBase(objRawProfile[0].data());\n  }\n\n  return null;\n};\n\n/**\n * Retreives the list of Active and Primary profiles that belong to certaing Users\n * @param {string[]} arrUserIds - Array of User Ids whose Profiles have to be retrived\n * @returns\n */\nconst getMainProfileAll = async (arrUserIds) => {\n  const arrQueryConstraint = [\n    where(\"booActive\", \"==\", true),\n    where(\"booPrimary\", \"==\", true),\n    where(\"strUserId\", \"in\", arrUserIds),\n  ];\n  try {\n    const arrQuerySnapDocs = await selectCollectionGroup(\n      arrQueryConstraint,\n      CollectionNames.PROFILES\n    );\n\n    if (arrQuerySnapDocs) {\n      const arrProfiles = arrQuerySnapDocs.map((objRawProfile) => {\n        const objProfile = profileFromDataBase(objRawProfile.data());\n        if (objProfile) {\n          return objProfile;\n        }\n\n        throw new Error(\n          \"serviceProfile.getMainProfileAll: objProfile cannot be null.\"\n        );\n      });\n\n      return arrProfiles;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return null;\n};\n\nexport { createProfile, getMainProfile, getMainProfileAll };\n","import {\n  signOut,\n  GoogleAuthProvider,\n  signInWithPopup,\n  getAdditionalUserInfo,\n  signInAnonymously,\n  // eslint-disable-next-line no-unused-vars\n  UserCredential,\n} from \"firebase/auth\";\nimport { appAuthProvider } from \"../firebase\";\n\n/**\n * @module serviceUserAuth\n */\n\n/**\n *\n * @returns {Promise<UserCredential | null>}\n */\nconst googleSignInUser = async () => {\n  try {\n    var provider = new GoogleAuthProvider();\n    return await signInWithPopup(appAuthProvider, provider);\n  } catch (error) {\n    console.error(\"googleSignInUser\", error);\n    return null;\n  }\n};\n\n/**\n * If resolves means that the user was successfully logged out. Otherwhise, there was an error.\n * @returns {Promise<void>}\n */\nconst googleSignOutUser = () => {\n  // signOut(appAuthProvider).then(() => {\n  //   //todo something to reaload the page and show default values\n  //   console.log(\"googleSignOutUser out!!!\");\n  // });\n  return signOut(appAuthProvider);\n};\n\n/**\n *\n * @param {UserCredential} objUserCrential\n * @returns {(boolean | null)}\n */\nconst isNewUser = (objUserCrential) => {\n  const objAdditionalInfo = getAdditionalUserInfo(objUserCrential);\n  return objAdditionalInfo ? objAdditionalInfo.isNewUser : null;\n};\n\n/**\n *\n * @returns {Promise<UserCredential | null>}\n */\nconst anonymousSignInUser = async () => {\n  try {\n    return await signInAnonymously(appAuthProvider);\n  } catch (error) {\n    console.error(\"anonymousSignIn:\", error);\n    return null;\n  }\n};\n\nexport { googleSignInUser, googleSignOutUser, isNewUser, anonymousSignInUser };\n"],"names":["userFromDataBase","objRawUser","objUser","shapeUser","strUserId","strEmail","strFullName","strAuthMethod","strProfilePicURL","dtCreatedOn","toDate","booActive","error","console","createUser","Date","createWithId","CollectionNames","getUser","strId","selectById","getDefaultProfilePicUrl","DatabaseValues","objDefaultPhotoURL","strDefaultProfilePicURL","handleExistingUser","dispatch","objNavigate","objExistingUser","getMainProfile","objMainProfile","objProfile","setLoggedUser","NavigationPaths","state","loggedIn","createDefaultProfile","strUserOwnerId","strAbout","strBgPicPath","strHeadLine","strCountry","strPostalCode","strLanguageId","arrNames","split","strFirstName","length","strLastName","slice","join","trim","createProfile","handleAuthUserInfo","objUserCredential","user","isNewUser","strPhotoURL","photoURL","uid","email","displayName","objCreatedUser","strDefaultBackgroundPicURL","Constants","authenticateAnonymously","anonymousSignInUser","AnonymousUserData","handleAsyncJoinGoogle","googleSignInUser","AuthenticationMethods","shapeProfile","strProfileId","booPrimary","arrSections","objIntro","shapeProfileIntro","strHeadline","strCountryLoc","strPostalCodeLoc","composeNewProfileId","profileFromDataBase","objRawProfile","objProfileIntro","strOserOwnerId","arrQueryConstraint","where","selectAll","data","getMainProfileAll","arrUserIds","selectCollectionGroup","arrQuerySnapDocs","arrProfiles","map","Error","provider","GoogleAuthProvider","signInWithPopup","appAuthProvider","googleSignOutUser","signOut","objUserCrential","objAdditionalInfo","getAdditionalUserInfo","signInAnonymously"],"sourceRoot":""}